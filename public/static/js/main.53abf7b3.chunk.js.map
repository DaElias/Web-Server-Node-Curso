{"version":3,"sources":["componentes/header.js","componentes/FormularioTareas.js","componentes/Tarea.js","componentes/ListaTarea.js","App.js","index.js"],"names":["Header","mostrarTareasCompletadas","cambiarMostrarTareasCompletadas","toggleCompetadas","className","onClick","icon","faEyeSlash","faEye","FormularioTareas","tareas","cambiarTareas","useState","inputTarea","cambiarImputTareas","action","onSubmit","e","preventDefault","id","uuidv4","texto","completada","value","type","placeholder","onChange","target","handelInput","faPlusSquare","Tareas","toggleCompletada","editarTarea","borrarTarea","editarTareas","editarTareasCambiar","nuevaTarea","cambiarNuevaTarea","faCheckSquare","faSquare","faEdit","faTimes","ListaTareas","map","filter","length","Tarea","App","mostrarCompletadas","tareasGuardadas","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","toString","ListaTarea","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53abf7b3.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\n\nconst Header = ({ mostrarTareasCompletadas, cambiarMostrarTareasCompletadas }) => {\n\n    const toggleCompetadas = () => {\n        cambiarMostrarTareasCompletadas(!mostrarTareasCompletadas);\n    }\n\n    return (\n        <header className=\"header\">\n            <h1 className=\"header__titulo\">Lista de Tareas</h1>\n            {mostrarTareasCompletadas ?\n                <button className=\"header__boton\" onClick={() => toggleCompetadas()}>\n                    No mostrar completadas\n                <FontAwesomeIcon\n                        icon={faEyeSlash}\n                        className='header__icono-boton'\n                    />\n                </button>\n                :\n                <button className=\"header__boton\" onClick={() => toggleCompetadas()}>\n                    Mostrar completadas\n                <FontAwesomeIcon icon={faEye}\n                        className='header__icono-boton'\n                    />\n                </button>\n\n            }\n\n        </header>\n    );\n}\n\n\nexport default Header;","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusSquare } from \"@fortawesome/free-solid-svg-icons\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst FormularioTareas = ({ tareas, cambiarTareas }) => {\n    const [inputTarea, cambiarImputTareas] = useState('');\n    const handelInput = (e) => {\n        cambiarImputTareas(e.target.value);\n    };\n\n    const handeleSubmit = (e) => {\n        // * no se refresca la pagina...\n        e.preventDefault();\n\n        if (inputTarea !== \"\") {\n            cambiarTareas([\n                ...tareas,\n                {\n                    id: uuidv4(),\n                    texto: inputTarea,\n                    completada: false,\n                },\n            ]);\n        }\n        cambiarImputTareas(\"\");\n\n    };\n\n    return (\n        <form action=\"\" className=\"formulario-tareas\" onSubmit={handeleSubmit}>\n            <input\n                value={inputTarea}\n                type=\"text\"\n                className=\"formulario-tareas__input\"\n                placeholder=\"Escribe Una tarea\"\n                onChange={(e) => handelInput(e)}\n            />\n            <button type=\"submit\" className=\"formulario-tareas__btn\">\n                <FontAwesomeIcon\n                    icon={faPlusSquare}\n                    className=\"formulario-tareas__icono-btn\"\n                />\n            </button>\n        </form>\n    );\n};\n\nexport default FormularioTareas;\n","import { useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckSquare, faEdit, faTimes, faSquare } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst Tareas = ({ tareas, toggleCompletada, editarTarea,borrarTarea }) => {\n    const [editarTareas, editarTareasCambiar] = useState(false);\n    const [nuevaTarea, cambiarNuevaTarea] = useState(tareas.texto);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        editarTarea(tareas.id, nuevaTarea);\n        editarTareasCambiar(false);\n    }\n    \n    return (\n        <li\n            className=\"lista-tareas__tarea\"\n            key={tareas.id}\n        >\n            <FontAwesomeIcon icon={tareas.completada ? faCheckSquare : faSquare}\n                className=\"lista-tareas__icono lista-tareas__icono-check\"\n                onClick={() => toggleCompletada(tareas.id)}\n            />\n            <div className='lista-tareas__texto'>\n                {editarTareas ?\n                    <form action=\"\" className=\"formulario-editar-tarea\" onSubmit={handleSubmit}>\n                        <input\n                            type='text'\n                            className='formulario-editar-tarea__input'\n                            value={nuevaTarea}\n                            onChange={(e) => cambiarNuevaTarea(e.target.value)}\n                        >\n                        </input>\n                        <button\n                            type='submit'\n                            className='formulario-editar-tarea__btn'\n                        >Actualizar</button>\n                    </form>\n                    :\n                    tareas.texto\n                }\n            </div>\n            <div className='lista-tareas__contenedor-botones'>\n                <FontAwesomeIcon icon={faEdit}\n                    className=\"lista-tareas__icono lista-tareas__icono-accion\"\n                    onClick={() => editarTareasCambiar(!editarTareas)}\n                />\n                <FontAwesomeIcon icon={faTimes}\n                    className=\"lista-tareas__icono lista-tareas__icono-accion\"\n                    onClick={()=>borrarTarea(tareas.id)}\n                />\n            </div>\n        </li>\n    );\n}\n\n\nexport default Tareas;\n","import { useLayoutEffect } from 'react';\nimport Tarea from './Tarea';\n\nconst ListaTareas = ({ tareas, cambiarTareas, mostrarTareasCompletadas }) => {\n\n    const toggleCompletada = (id) => {\n        //console.log('el id es: ', id);\n        cambiarTareas(tareas.map((tareas) => {\n            if (tareas.id === id) {\n                return { ...tareas, completada: !tareas.completada }\n            }\n            return tareas;\n        }));\n    };\n\n    const editarTarea = (id, nuevaTarea) => {\n        cambiarTareas(tareas.map((tareas) => {\n            if (tareas.id === id) {\n                return { ...tareas, texto: nuevaTarea }\n            }\n            return tareas;\n        }));\n    };\n\n    const borrarTarea = (id) => {\n        cambiarTareas(tareas.filter((tareas) => {\n            if (tareas.id !== id) {\n                return { tareas }\n            }\n            return;\n        }));\n    };\n\n    return (\n        <ul className=\"lista-tareas\">\n            { tareas.length > 0\n                ? tareas.map((tareas) => {\n                    if (mostrarTareasCompletadas) {\n                        return <Tarea\n                            tareas={tareas}\n                            toggleCompletada={toggleCompletada}\n                            editarTarea={editarTarea}\n                            borrarTarea={borrarTarea}\n                        />\n                        // * si la tarea no esta completada\n                    } else if (!tareas.completada) {\n                        return <Tarea\n                            tareas={tareas}\n                            toggleCompletada={toggleCompletada}\n                            editarTarea={editarTarea}\n                            borrarTarea={borrarTarea}\n                        />\n                    }// * si ya esta completada no la devolvemos\n                })\n                :\n                <div className='lista-tareas__tarea'>\n                    ~No hay tareas Agregadas~\n                </div>\n            }\n        </ul>\n    )\n}\n\nexport default ListaTareas;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './componentes/header';\nimport FormularioTareas from './componentes/FormularioTareas';\nimport ListaTareas from './componentes/ListaTarea';\n\n\n\n\nconst App = () => {\n  //* estoy llamando de desde el local storage a las tareas previamente guardadas\n  const tareasGuardadas = localStorage.getItem('task') ? JSON.parse(localStorage.getItem('task')) : [];\n  const [tareas, cambiarTareas] = useState(tareasGuardadas);\n  //***  se ejecuta cada vez que el hook que en el hook de tareas se realize un cambio\n  useEffect(() => {\n    localStorage.setItem('task', JSON.stringify(tareas));\n    //console.log(JSON.stringify(tareas));  // * comvertir la los datos de la lista de tareas en texto, apra guardarlos en Json\n  }, [tareas]);\n  //console.log(tareas);\n\n\n\n  let mostrarCompletadas;\n  if (localStorage.getItem(\"mostrarCompletadas\") === null) {\n    mostrarCompletadas = true;\n  } else {\n    mostrarCompletadas = localStorage.getItem(\"mostrarCompletadas\") === 'true' ? mostrarCompletadas = true : mostrarCompletadas = false;\n  }\n  const [mostrarTareasCompletadas, cambiarMostrarTareasCompletadas] = useState(mostrarCompletadas);\n  useEffect(() => {\n    localStorage.setItem('mostrarCompletadas', mostrarTareasCompletadas.toString());\n  }, [mostrarTareasCompletadas]);\n\n  return (\n    <div className=\"contenedor\">\n      <Header\n        mostrarTareasCompletadas={mostrarTareasCompletadas}\n        cambiarMostrarTareasCompletadas={cambiarMostrarTareasCompletadas}\n      />\n      <FormularioTareas tareas={tareas} cambiarTareas={cambiarTareas} />\n      <ListaTareas\n        tareas={tareas}\n        cambiarTareas={cambiarTareas}\n        mostrarTareasCompletadas={mostrarTareasCompletadas}\n      />\n    </div>\n  );\n}\n\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}